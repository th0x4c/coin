#!/bin/sh

COIN_HOME=$(dirname $0)/../
COIN_HOME=$($COIN_HOME/libexec/coin-expand-path.sh $COIN_HOME)

LIBEXEC_DIR=$COIN_HOME/libexec/
COMMAND_DIR=$COIN_HOME/command/

HELP=0
NODE=""
OS_USER=""
OS_PASSWORD=""
REMOTE_COIN_HOME=$COIN_HOME
ACT=""

usage()
{
  cat <<EOF
Description:
    Collect OS / DB information

Usage: coin [options] <action> [<command>]

Option:
    -n, --node <node>               Remote nodes (comma-delimited list)
    -g, --group <file>              File containing a list of remote nodes
    -d, --directory <dir>           Deployment directory on the remote node
    -u, --user <user>               OS user to log in as on the remote node
    -p, --password <password>       OS password to log in as on the remote node
    -h, --help                      Output help

Action:
EOF

  for act in $(action_list)
  do
    echo "    $act"
  done

  cat <<EOF

For help on each action and its options use:
    coin -h <action>

Command:
EOF

  for comm in $(ls $COMMAND_DIR)
  do
    . ${COMMAND_DIR}/${comm}
    printf "    %s \t %s\n" $comm "$(coin_description)"
  done

  cat <<EOF

Example:
    coin start hello    # start "hello" Coin command on local
    coin list hello     # list running "hello" Coin command on local
    coin -a list        # list all running Coin command on local
    coin stop hello     # stop "hello" Coin command on local
    coin -a stop        # stop all running Coin command on local

    coin -n node1,node2 deploy                  # deploy Coin to node1 and node2
    coin -n node1,node2 start hello             # start "hello" Coin command on node1 and node2
    coin -n node1,node2 list hello              # list running "hello" Coin command on node1 and node2
    coin -n node1,node2 -a list                 # list all running Coin command on node1 and node2
    coin -n node1,node2 stop hello              # stop "hello" Coin command on node1 and node2
    coin -n node1,node2 -a stop                 # stop all running Coin command on node1 and node2
    coin -n node1,node2 -l copy 'coin*' ./      # copy last log files from node1 and node2 to current directory on local
    coin -n node1,node2 copy 'coin*' ./log      # copy all log files from node1 and node2 to ./log on local
    coin -n node1,node2 undeploy                # undeploy Coin from node1 and node2

    coin -h stop    # output help on "stop" action
EOF
}

action_list()
{
  ls ${COIN_HOME}/bin  | sed 's/coin//g' | cut -d"-" -f2
}

match_action()
{
  local arg=$1

  for act in $(action_list)
  do
    echo $arg | grep -w "$act" >/dev/null
    if [ $? -eq 0 ]
    then
      echo $act
    fi
  done
}

node_with_user()
{
  local nodes=$1
  local ret=""
  local nd=""

  for node in $(echo $nodes | sed 's/,/ /g')
  do
    nd=$node
    case $node in
      */*@* ) # user/password@hostname
        ;;
      *@* ) # user@hostname
        if [ -n "$OS_PASSWORD" ]
        then
          nd=$(echo $node | sed 's/@/\/'$OS_PASSWORD'@/')
        fi
        ;;
      * ) # hostname
        if [ -n "$OS_PASSWORD" ]
        then
          nd="${OS_USER}/${OS_PASSWORD}@$node"
        else
          nd="${OS_USER}@$node"
        fi
        ;;
    esac
    ret="$ret,$nd"
  done

  echo $ret | sed 's/^,//'
}

node_from_file()
{
  local file_path=$1

  if [ -f $file_path ]
  then
    sed '/^ *$/d' $file_path | tr '\n' ',' | sed 's/,$//'
  fi
}

while [ $# -gt 0 ]
do
  case $1 in
    -n|--node )
      shift
      if [ -n "$1" ]
      then
        NODE=$1
        shift
      fi
      ;;
    -g|--group )
      shift
      if [ -n "$1" ]
      then
        NODE=$(node_from_file $1)
        shift
      fi
      ;;
    -d|--directory )
      shift
      if [ -n "$1" ]
      then
        REMOTE_COIN_HOME=$1
        shift
      fi
      ;;
    -u|--user )
      shift
      if [ -n "$1" ]
      then
        OS_USER=$1
        shift
      fi
      ;;
    -p|--password )
      shift
      if [ -n "$1" ]
      then
        OS_PASSWORD=$1
        shift
      fi
      ;;
    -h|--help )
      HELP=1
      shift
      ;;
    * )
      break
      ;;
  esac
done

ARG=$@
ACT=$(match_action "$ARG")
if [ -z "$ACT" ]
then
  if [ $HELP -eq 0 ]
  then
    echo "No action."
  fi
  usage
  exit
fi
act_arg=$(echo "$ARG" | sed 's/'${ACT}'//')
if [ $HELP -eq 1 ]
then
  act_arg="-h $act_arg"
fi

case $ACT in
  deploy|copy|undeploy )
    if [ -n "$NODE" ]
    then
      act_arg="-n $(node_with_user $NODE) -d $REMOTE_COIN_HOME $act_arg"
    fi

    command="${COIN_HOME}/bin/coin-${ACT} $act_arg"

    if [ "$ACT" = "copy" ]
    then
      # Do not expand glob pattern('*') to pathname
      logdir=$(echo "$command" | awk '{print $(NF-1)}')
      destdir=$(echo "$command" | awk '{print $NF}')
      exec $(echo "$command" |  awk '{$NF=""; $(NF-1)=""; print}') "$logdir" $destdir
    else
      exec $command
    fi
    ;;
  * )
    command="${REMOTE_COIN_HOME}/bin/coin-${ACT} $act_arg"

    if [ -z "$NODE" -o $HELP -eq 1 ]
    then
      exec $command
    fi

    pidlist_before=$($LIBEXEC_DIR/coin-pid.sh $command)
    for node in $(echo $NODE | sed 's/,/ /g')
    do
      $LIBEXEC_DIR/coin-sshpass.sh ssh -f $(node_with_user $node) $command
    done
    pidlist_after=$($LIBEXEC_DIR/coin-pid.sh $command)

    for pid in $pidlist_after
    do
      if [ -z "$(echo $pidlist_before | grep -w $pid)" ]
      then
        command_pidlist="$pid $command_pidlist"
      fi
    done
    command_pidlist=$(echo $command_pidlist | sed 's/ /,/g')

    if [ -n "$command_pidlist" ]
    then
      $LIBEXEC_DIR/coin-pid.sh --wait --pid $command_pidlist
    fi
    ;;
esac
